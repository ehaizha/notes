1.  java.lang.reflect.Modifier provide public static util method
	to check the method or properties access modifier
	It use a int with special bit for different type modifier
2.	package-info.java is used for javadoc to generate the package
	info page, you can add java doc comments and annotation,but at
	least the file contains the package declaration.
3.	java.util.function package:
	Functional interfaces provide target types for lambda expressions and method references
	There 5 basic interface
	a. Predict
	b. Consumer
	c. Supplier
	d. Functioin
	e. Operator
	and the corresponding interface for the primitive 
4.  java.util.Objects.requireNonNull(Object obj)
	public static <T> T requireNonNull(T obj) {
        if (obj == null)
            throw new NullPointerException();
        return obj;
    }
5.  java varargs: The varrags allows the method to accept zero or muliple arguments.
    Before varargs either we use overloaded method or take an array as the method 
	parameter but it was not considered good because it leads to the maintenance problem.
	If we don't know how many argument we will have to pass in the method, 
	varargs is the better approach.
	Advantage of Varargs:
	We don't have to provide overloaded methods so less code.
	Syntax of varargs:
	return_type method_name(data_type... variableName){}
	Rules for varargs:
	a. There can be only one variable argument in the method.
	b. Variable argument (varargs) must be the last argument.
6.  String.format(String format, Object...args)
	System.out.println(String.format("Test for %s and there has total %d test cases", "String format",1));
	output:Test for String format and there has total 1 test cases

7.  Spring @Profile allow developers to register beans by condition. 
    For example, register beans based on what operating 
	system (Windows, *nix) your application is running, 
	or load a database properties file based on the application 
	running in development, test, staging or production environment.
8.  org.springframework.core.env.Environment extends org.springframework.core.env.PropertyResolver
    add profile support function.
9.  org.springframework.context.ApplicationContext extend org.springframework.core.env.Environment

10. Prototype scope = A new object is created each time it is injected/looked up. It will use new SomeClass() each time.
    Singleton scope = (Default) The same object is returned each time it is injected/looked up. 
	Here it will instantiate one instance of SomeClass and then return it each time.
	
11. java template	